#!/usr/bin/env perl

# usage: 
# in perl script:
# require "70.conv.decl.conf";
# my $value = weight($number);

use strict;
use warnings;
no warnings "numeric";


# номера индексов которые (при вычитании -1) не совпадают с номерами переменных :
my %ind_to_vars = (
 14 => 100, # - adYandexGoogle
 15 => 101, # - main.text
);

sub ind_to_var {
 #       0         1     2 ...
 # 197671:5666 * 03.ru * 4*7*17*1*4*40*2*5*0*2*0*0*0
 # функция из индекса в файле 
 # возвращает номер переменной
 # минимальный номер инд=1
 my $ind = shift;
 $ind>=2 or die "Bad ind!";
 my $rv = $ind_to_vars{ $ind } || ($ind-1) or die "--- bad rv! --";
 $rv;
}

my %decl = ( 
# справочник: номер переменной => как получить значение.
# здесь нет привязки номера переменной к номеру колонки в файле *vars ! Даешь ключ (номер) и исх значение - получаешь выходное значение   
# Привязки объясняются описаниями D=>...
# SUB - функция преобразования значения, undef - функция не применяется, используется значение, как есть
# Z => 1|0  если 1 - то нули спамим, если 0 - не спамим, по дефолту - 0.
# D - описание (избегать звездочек)
# логику см в функции weight() ниже.

 1   => { SUB=>sub{ $_[0] }, Z=>1, D=>"bugs_uniq - кол-во уникальных багов на сайте" },
 2   => { SUB=>sub{ $_[0] }, Z=>1, D=>"bugs_on_pg	- кол-во кодов в среднем на странице" },
 3   => { SUB=>sub{ $_[0] }, Z=>1, D=>"bugs_on_pg_div_uniq_x10 = bugs_on_pg / bugs_uniq * 10"},
 4   => { SUB=>sub{ $_[0] }, Z=>1, D=>"ad_uniq - кол-во уникальных 'ad' на сайте"},
 5   => { SUB=>sub{ $_[0] }, Z=>1, D=>"ad_on_pg - кол-во кодов 'ad' в среднем на странице"},
 6   => { SUB=>sub{ $_[0] }, Z=>1, D=>"ad_on_pg_div_uniq_x10 - ad_on_pg / ad_uniq * 10"},
 7   => { SUB=>sub{ $_[0] }, Z=>1, D=>"ad_div_bugs_uniq_x10 - кол-во разных ad / кол-во разных bugs * 10"},
 8   => { SUB=>sub{ $_[0] }, Z=>1, D=>"analytics_div_bugs_uniq_x10"},
 9   => { SUB=>sub{ $_[0] }, Z=>1, D=>"privacy_div_bugs_uniq_x10"},
 10   => { SUB=>sub{ $_[0] }, Z=>1, D=>"tracker_div_bugs_uniq_x10"},
 11   => { SUB=>sub{ $_[0] }, Z=>1, D=>"widget_div_bugs_uniq_x10"},
 12   => { SUB=>sub{ $_[0] }, Z=>1, D=>"teaser_div_bugs_uniq_x10"},
 100 => { SUB=>sub{ $_[0] }, Z=>1, D=>"adYandexGoogle - присутствуют оба"},
 101 => {SUB=>sub{ $_[0] }, Z=>1, D=>"maintext - (весь_текст-чистый)/чистый"},

);



# ========================= weight() looks to %decl and by $number return $weight: =========
sub weight{
 # функция вычисляет вес(значение) переменной по ее номеру( ключи в %decl ) и исходному значению ( srcval )
 # Usage: 
 # $val = weight($number, $srcval);
 # ($val, $descr) = weight($number, $srcval); 
 # defined($val) and do smth... # - undef may be returned
 
 my ($number, $srcval) = @_;
 $number+=0 or die "Number of var!"; # ключи ==0 не допускаются
 defined $srcval or die "srcval!";
 $srcval eq "NA" and return undef; # NA на входе
 # исх значения ==0 допускаются. Что с ними делать решаем в %decl или после получения значения из weight() в вызывающем скрипте
 return undef if not $decl{$number};
 
 my %numdecl = %{ $decl{$number} }; 
 my $rv = $numdecl{ SUB }->( $srcval );
 $rv = undef if !$rv and !$numdecl{Z}; # если не установлен ключ Z=>1, то rv==0 считаются плохими значениями (undef)
 
 return wantarray ? ($rv, $numdecl{D}) : $rv;
}


__END__

 #>> Описанный выше %decl рассчитан на такие колонки:
 #>> | 1  sid:sz    |  		|
 #>> | 2  domain    |    	| 
 #>> | bugs_uniq 				- кол-во уникальных багов на сайте
 #>> | bugs_on_pg				- кол-во кодов в среднем на странице
 #>> | bugs_on_pg_div_uniq_x10 = bugs_on_pg / bugs_uniq * 10	
 #>> | ad_uniq 				- кол-во уникальных 'ad' на сайте
 #>> | ad_on_pg				- кол-во кодов 'ad' в среднем на странице 
 #>> | ad_on_pg_div_uniq_x10 		- ad_on_pg / ad_uniq * 10
 #>> | ad_div_bugs_uniq_x10			- кол-во разных ad / кол-во разных bugs * 10
 #>> | expand_8_by_types			- развернутое на все типы #8
 #>> | adYandexGoogle			- присутствуют оба
